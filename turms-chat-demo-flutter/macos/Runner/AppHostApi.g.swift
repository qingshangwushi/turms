// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct DiskSpaceInfo {
  var total: Int64
  var free: Int64
  var usable: Int64

  static func fromList(_ list: [Any?]) -> DiskSpaceInfo? {
    let total = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let free = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let usable = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)

    return DiskSpaceInfo(
      total: total,
      free: free,
      usable: usable
    )
  }
  func toList() -> [Any?] {
    return [
      total,
      free,
      usable,
    ]
  }
}
private class AppHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return DiskSpaceInfo.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class AppHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DiskSpaceInfo {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class AppHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AppHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AppHostApiCodecWriter(data: data)
  }
}

class AppHostApiCodec: FlutterStandardMessageCodec {
  static let shared = AppHostApiCodec(readerWriter: AppHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppHostApi {
  func getDiskSpace(path: String) throws -> DiskSpaceInfo
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppHostApiSetup {
  /// The codec used by AppHostApi.
  static var codec: FlutterStandardMessageCodec { AppHostApiCodec.shared }
  /// Sets up an instance of `AppHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppHostApi?) {
    let getDiskSpaceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.turms_chat_demo.AppHostApi.getDiskSpace", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDiskSpaceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pathArg = args[0] as! String
        do {
          let result = try api.getDiskSpace(path: pathArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDiskSpaceChannel.setMessageHandler(nil)
    }
  }
}
